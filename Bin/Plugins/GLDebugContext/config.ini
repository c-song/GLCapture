//////////////////////////////////////////////////////////////
//
//   Debug context config file
//
//   To use, add the following to the plugins section of gliconfig.ini:
//
//      DebugContext = ("GLDebugContext/GLDebugContext.dll")
//
//   A user may also want to disable an application from detecting the debug 
//   mode by removing the ARB_debug_output/GL_KHR_debug extension with the extension override plugin
//   (this prevents the application setting fighting with these config settings)
//
//      ExtensionOverride = ("GLExtOverride/GLExtOverride.dll")
//      {
//        RemoveExtensions = ("GL_ARB_debug_output", "GL_KHR_debug");
//      }
//
//   Note: Changing this file will affect all GLIntercept sessions that load
//         this DLL. To only affect a single GLIntercept session, place the
//         relevant options inside this plugins' section in gliConfig.ini.
//
//         (This file is parsed first for the defaults, then the options in 
//          gliConfig.ini can over-ride the defaults)
//
//////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////
// Force setting of debug context via wglCreateContextAttribsARB
// (ARB_debug_output extension is typically only available in a debug context)
//////////////////////////////////////////////////////////////

ForceDebugMode = True;

//////////////////////////////////////////////////////////////
// If debug messages are added to the OpenGL function log
//////////////////////////////////////////////////////////////

LogToFunctionLog = True;

//////////////////////////////////////////////////////////////
// If debug messages are added to the error log 
// (and output window in visual studio)
//////////////////////////////////////////////////////////////

LogToErrorLog = True;

//////////////////////////////////////////////////////////////
// If a debugger breakpoint is issued on every debug message
// when running under a debugger. Stepping through some 
// assembly (Visual studio - F10) may be necessary to return 
// to a valid stack frame to see the code causing the message.
//////////////////////////////////////////////////////////////

BreakOnMessage = False;

//////////////////////////////////////////////////////////////
// POTENTIAL FUTURE OPTION (currently forced to true): 
// Force setting synchronous debug mode - If enabled debug messages
// will be logged with each GL function call, Else, debug messages
// will be dumped on frame end. 
// Enabling may significantly slow OpenGL divers (disables multithread optimizations)
//////////////////////////////////////////////////////////////
// ForceSyncDebug = True;


//////////////////////////////////////////////////////////////
// Control of what level of debug messages to log.
// Options are the same as specified via glDebugMessageControl/glDebugMessageControlARB.
// 
//  Multiple rules of the syntax:
//
//  RuleName = (Source, Type, Severity, Enabled)
//  {
//    ids = (a,b,c);
//  }
//
//  Where:
//   Source is one of ("Dont Care", "OpenGL", "Windows", "Shader Compiler", "Third Party", "Application", "Other")
//   Type is one of ("Dont Care", "Error", "Deprecated behavior", "Undefined behavior", "Portability", "Performance", "Other", "Marker", "Push Group", "Pop Group")
//   Severity is one of ("Dont Care","High","Medium", "Low", "Notification")
//   Enabled is "True" or "False"
//   ids [Optional] is a list of the message ids to change
//
// If no rules are specified, the default rules or application
// setting are used.
//////////////////////////////////////////////////////////////

MessageControl
{
  // Enable all messages by default
  AllMessages = ("Dont Care", "Dont Care", "Dont Care", True)
   
  // Example of disabling an OpenGL message number (note the "Don't Care" for severity)
  //DisableRule = ("OpenGL", "Other", "Dont Care", False)
  //{
  //  ids = (131185);
  //}    
    
}






