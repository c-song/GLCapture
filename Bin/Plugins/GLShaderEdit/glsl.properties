# Define SciTE settings for GLSL

filter.glsl=GLSL (glsl)|*.glsl|

file.patterns.glsl=*.glsl

lexer.$(file.patterns.glsl)=cpp


#font.monospace=font:Fixedsys,size:9

command.help.$(file.patterns.glsl)="http://www.opengl.org/documentation/oglsl.html"
command.help.subsystem.$(file.patterns.glsl)=2


# GLSL styles
# White space
style.cpp.0=fore:#808080
# Comment
style.cpp.1=fore:#007F00,$(font.comment)
# Line Comment
style.cpp.2=fore:#007F00,$(font.comment)
# Doc comment
style.cpp.3=fore:#7F7F7F
# Number
style.cpp.4=fore:#007F7F
# Keyword
style.cpp.5=fore:#00007F
# Double quoted string
style.cpp.6=fore:#7F007F,$(font.monospace)
# Single quoted string
style.cpp.7=fore:#7F007F,$(font.monospace)
# Symbols
style.cpp.8=fore:#007F7F
# Preprocessor
style.cpp.9=fore:#7F7F00
# Operators
style.cpp.10=
# Identifiers
style.cpp.11=
# End of line where string is not closed
style.cpp.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Braces are only matched in operator style
braces.cpp.style=10

# Verbatim strings for C#
style.cpp.13=fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
# Regular expressions for JavaScript
style.cpp.14=fore:#3F7F3F,$(font.monospace),back:#E0F0FF,eolfilled
# Doc Comment Line
style.cpp.15=$(colour.code.comment.doc),$(font.code.comment.doc)

# Keywords2
style.cpp.16=fore:#B00040

# Comment keyword
style.cpp.17=fore:#3060A0,$(font.code.comment.doc)
# Comment keyword error
style.cpp.18=fore:#804020,$(font.code.comment.doc)
# Braces are only matched in operator style
braces.cpp.style=10



#Keyword 3?
#style.cpp.18=fore:#007F7F

#Keyword 4
style.cpp.19=fore:#007F7F


word.chars.cxx=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.glsl)=$(word.chars.cxx)
comment.block.cpp=//~
#comment.block.at.line.start.cpp=1
comment.stream.start.cpp=/*
comment.stream.end.cpp=*/
comment.box.start.cpp=/*
comment.box.middle.cpp= *
comment.box.end.cpp= */
fold.comment=1
fold.preprocessor=1
#fold.at.else=1

statement.indent.$(file.patterns.glsl)=5 case catch class default do else finally \
for if private protected public struct try union while
statement.end.$(file.patterns.glsl)=10 ;
statement.lookback.$(file.patterns.glsl)=20
block.start.$(file.patterns.glsl)=10 {
block.end.$(file.patterns.glsl)=10 }

# autocomplete.cpp.fillups=(

preprocessor.symbol.$(file.patterns.glsl)=#
preprocessor.start.$(file.patterns.glsl)=if ifdef ifndef
preprocessor.middle.$(file.patterns.glsl)=else elif
preprocessor.end.$(file.patterns.glsl)=endif




# Language keywords
keywords.$(file.patterns.glsl)=\
attribute \
break \
const continue \
discard do \
else \
false for \
if \
in inout \
main \
out \
return \
true \
uniform \
varying \
while \
struct \
int ivec2 ivec3 ivec4 \
mat2 mat3 mat4  \
float vec2 vec3 vec4 void  \
bool bvec2 bvec3 bvec4  \
sampler1D sampler2D sampler3D samplerCube sampler1DShadow sampler2DShadow \
asm \
cast \
class  \
default \
double  \
dvec2  \
dvec3  \
dvec4  \
enum  \
extern  \
external  \
fixed  \
fvec2  \
fvec3  \
fvec4 \
goto  \
half  \
hvec2  \
hvec3  \
hvec4  \
inline  \
input  \
interface \
long  \
namespace  \
noinline  \
output \
packed \
public  \
sampler2DRect  \
sampler3DRect  \
sampler3DRectShadow \
short  \
sizeof  \
static  \
switch  \
template  \
this  \
typedef  \
union  \
unsigned \
using \
volatile




# Uniforms/Constants
keywords2.$(file.patterns.glsl)=\
gl_BackLightModelProduct \
gl_BackLightProduct \
gl_BackMaterial \
gl_ClipPlane \
gl_DepthRange \
gl_DepthRangeParameters \
gl_EyePlaneQ \
gl_EyePlaneR \
gl_EyePlaneS \
gl_EyePlaneT \
gl_Fog \
gl_FogParameters \
gl_FrontLightModelProduct \
gl_FrontLightProduct \
gl_FrontMaterial \
gl_LightModel \
gl_LightModelParameters \
gl_LightModelProducts \
gl_LightProducts \
gl_LightSource \
gl_LightSourceParameters \
gl_MaterialParameters \
gl_MaxClipPlanes \
gl_MaxCombinedTextureImageUnits \
gl_MaxDrawBuffers \
gl_MaxFragmentUniformComponents \
gl_MaxLights \
gl_MaxTextureCoords \
gl_MaxTextureImageUnits \
gl_MaxTextureUnits \
gl_MaxVaryingFloats \
gl_MaxVertexAttribs \
gl_MaxVertexTextureImageUnits \
gl_MaxVertexUniformComponents \
gl_ModelViewMatrix \
gl_ModelViewMatrixInverse \
gl_ModelViewMatrixInverseTranspose \
gl_ModelViewMatrixTranspose \
gl_ModelViewProjectionMatrix \
gl_ModelViewProjectionMatrixInverse \
gl_ModelViewProjectionMatrixInverseTranspose \
gl_ModelViewProjectionMatrixTranspose \
gl_NormalMatrix \
gl_NormalScale \
gl_ObjectPlaneQ \
gl_ObjectPlaneR \
gl_ObjectPlaneS \
gl_ObjectPlaneT \
gl_Point \
gl_PointParameters \
gl_ProjectionMatrix \
gl_ProjectionMatrixInverse \
gl_ProjectionMatrixInverseTranspose \
gl_ProjectionMatrixTranspose \
gl_TextureEnvColor \
gl_TextureMatrix \
gl_TextureMatrixInverse \
gl_TextureMatrixInverseTranspose \
gl_TextureMatrixTranspose \
gl_BackColor \
gl_BackSecondaryColor \
gl_ClipVertex \
gl_Color \
gl_Color \
gl_FogCoord \
gl_FogFragCoord \
gl_FragColor \
gl_FragCoord \
gl_FragData \
gl_FragDepth \
gl_FrontColor \
gl_FrontFacing \
gl_FrontSecondaryColor \
gl_MultiTexCoord0 \
gl_MultiTexCoord1 \
gl_MultiTexCoord2 \
gl_MultiTexCoord3 \
gl_MultiTexCoord4 \
gl_MultiTexCoord5 \
gl_MultiTexCoord6 \
gl_MultiTexCoord7 \
gl_Normal \
gl_PointSize \
gl_Position \
gl_SecondaryColor \
gl_SecondaryColor \
gl_TexCoord \
gl_Vertex 

# Built in functions
keywords4.$(file.patterns.glsl)=\
abs \
acos \
all \
any \
asin \
atan \
ceil \
clamp \
cos \
cross \
dFdx \
dFdy \
degrees \
distance \
dot \
equal \
exp \
exp2 \
faceforward \
floor \
fract \
ftransform \
fwidth \
greaterThan \
greaterThanEqual \
inversesqrt \
length \
lessThan \
lessThanEqual \
log \
log2 \
matrixCompMult \
max \
min \
mix \
mod \
noise1 \
noise2 \
noise3 \
noise4 \
normalize \
not \
notEqual \
pow \
radians \
reflect \
refract \
shadow1D \
shadow1DLod \
shadow1DProj \
shadow1DProjLod \
shadow2D \
shadow2DLod \
shadow2DProj \
shadow2DProjLod \
sign \
sin \
smoothstep \
sqrt \
step \
tan \
texture1D \
texture1DLod \
texture1DProj \
texture1DProjLod \
texture2D \
texture2DLod \
texture2DProj \
texture2DProjLod \
texture3D \
texture3DLod \
texture3DProj \
texture3DProjLod \
textureCube \
textureCubeLod 




