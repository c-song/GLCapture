
radians (float degrees) = float; Converts degrees to radians.
radians (vec2 degrees) = vec2; Converts degrees to radians.
radians (vec3 degrees) = vec3; Converts degrees to radians.
radians (vec4 degrees) = vec4; Converts degrees to radians.

degrees (float radians) = float; Converts radians to degrees.
degrees (vec2 radians) = vec2; Converts radians to degrees.
degrees (vec3 radians) = vec3; Converts radians to degrees.
degrees (vec4 radians) = vec4; Converts radians to degrees.

sin (float angle) = float; The standard trigonometric sine function.
sin (vec2 angle) = vec2; The standard trigonometric sine function.
sin (vec3 angle) = vec3; The standard trigonometric sine function.
sin (vec4 angle) = vec4; The standard trigonometric sine function.

cos (float angle) = float; The standard trigonometric cosine function.
cos (vec2 angle) = vec2; The standard trigonometric cosine function.
cos (vec3 angle) = vec3; The standard trigonometric cosine function.
cos (vec4 angle) = vec4; The standard trigonometric cosine function.

tan (float angle) = float; The standard trigonometric tangent.
tan (vec2 angle) = vec2; The standard trigonometric tangent.
tan (vec3 angle) = vec3; The standard trigonometric tangent.
tan (vec4 angle) = vec4; The standard trigonometric tangent.

asin (float x) = float; Arc sine. Returns an angle whose sine is x. The returned range is [-PI/2, PI/2]. Results are undefined if |x| > 1.
asin (vec2 x) = vec2; Arc sine. Returns an angle whose sine is x. The returned range is [-PI/2, PI/2]. Results are undefined if |x| > 1.
asin (vec3 x) = vec3; Arc sine. Returns an angle whose sine is x. The returned range is [-PI/2, PI/2]. Results are undefined if |x| > 1.
asin (vec4 x) = vec4; Arc sine. Returns an angle whose sine is x. The returned range is [-PI/2, PI/2]. Results are undefined if |x| > 1.

acos (float x) = float; Arc cosine. Returns an angle whose cosine is x. The returned range is [0, PI]. Results are undefined if |x| > 1.
acos (vec2 x) = vec2; Arc cosine. Returns an angle whose cosine is x. The returned range is [0, PI]. Results are undefined if |x| > 1.
acos (vec3 x) = vec3; Arc cosine. Returns an angle whose cosine is x. The returned range is [0, PI]. Results are undefined if |x| > 1.
acos (vec4 x) = vec4; Arc cosine. Returns an angle whose cosine is x. The returned range is [0, PI]. Results are undefined if |x| > 1.

atan (float y, float x) = float; Arc tangent. Returns an angle whose tangent is y/x. The range returned is [-PI, PI]. Results are undefined if x and y are both 0.
atan (vec2 y, vec2 x) = vec2; Arc tangent. Returns an angle whose tangent is y/x. The range returned is [-PI, PI]. Results are undefined if x and y are both 0.
atan (vec3 y, vec3 x) = vec3; Arc tangent. Returns an angle whose tangent is y/x. The range returned is [-PI, PI]. Results are undefined if x and y are both 0.
atan (vec4 y, vec4 x) = vec4; Arc tangent. Returns an angle whose tangent is y/x. The range returned is [-PI, PI]. Results are undefined if x and y are both 0.

atan (float y_over_x) = float; Arc tangent. Returns an angle whose tangent is y_over_x. The range returned is [-PI/2, PI/2].
atan (vec2 y_over_x) = vec2; Arc tangent. Returns an angle whose tangent is y_over_x. The range returned is [-PI/2, PI/2].
atan (vec3 y_over_x) = vec3; Arc tangent. Returns an angle whose tangent is y_over_x. The range returned is [-PI/2, PI/2].
atan (vec4 y_over_x) = vec4; Arc tangent. Returns an angle whose tangent is y_over_x. The range returned is [-PI/2, PI/2].


pow (float x, float y) = float; Returns x^y. Undefined results if x < 0 or x = 0, y <= 0.
pow (vec2 x, vec2 y) = vec2; Returns x^y. Undefined results if x < 0 or x = 0, y <= 0.
pow (vec3 x, vec3 y) = vec3; Returns x^y. Undefined results if x < 0 or x = 0, y <= 0.
pow (vec4 x, vec4 y) = vec4; Returns x^y. Undefined results if x < 0 or x = 0, y <= 0.

exp (float x) = float; Returns the natural exponentiation of x, i.e. e^x.
exp (vec2 x) = vec2; Returns the natural exponentiation of x, i.e. e^x.
exp (vec3 x) = vec3; Returns the natural exponentiation of x, i.e. e^x.
exp (vec4 x) = vec4; Returns the natural exponentiation of x, i.e. e^x.

log (float x) = float; Returns the natural log x, i.e., returns y where x = e^y. Undefined results if x <= 0.
log (vec2 x) = vec2; Returns the natural log x, i.e., returns y where x = e^y. Undefined results if x <= 0.
log (vec3 x) = vec3; Returns the natural log x, i.e., returns y where x = e^y. Undefined results if x <= 0.
log (vec4 x) = vec4; Returns the natural log x, i.e., returns y where x = e^y. Undefined results if x <= 0.

exp2 (float x) = float; Returns 2 raised to the x power, i.e., 2^x.
exp2 (vec2 x) = vec2; Returns 2 raised to the x power, i.e., 2^x.
exp2 (vec3 x) = vec3; Returns 2 raised to the x power, i.e., 2^x.
exp2 (vec4 x) = vec4; Returns 2 raised to the x power, i.e., 2^x.

log2 (float x) = float; Returns the base 2 log of x, i.e., returns y where x = 2^y. Undefined results if x <= 0.
log2 (vec2 x) = vec2; Returns the base 2 log of x, i.e., returns y where x = 2^y. Undefined results if x <= 0.
log2 (vec3 x) = vec3; Returns the base 2 log of x, i.e., returns y where x = 2^y. Undefined results if x <= 0.
log2 (vec4 x) = vec4; Returns the base 2 log of x, i.e., returns y where x = 2^y. Undefined results if x <= 0.

sqrt (float x) = float; Returns the positive square root of x. Undefined results if x < 0.
sqrt (vec2 x) = vec2; Returns the positive square root of x. Undefined results if x < 0.
sqrt (vec3 x) = vec3; Returns the positive square root of x. Undefined results if x < 0.
sqrt (vec4 x) = vec4; Returns the positive square root of x. Undefined results if x < 0.

inversesqrt (float x) = float; Returns the 1/sqrt(x). Undefined results if x <= 0.
inversesqrt (vec2 x) = vec2; Returns the 1/sqrt(x). Undefined results if x <= 0.
inversesqrt (vec3 x) = vec3; Returns the 1/sqrt(x). Undefined results if x <= 0.
inversesqrt (vec4 x) = vec4; Returns the 1/sqrt(x). Undefined results if x <= 0.


abs (float x) = float; Returns x if x >= 0, otherwise it returns -x
abs (vec2 x) = vec2; Returns x if x >= 0, otherwise it returns -x
abs (vec3 x) = vec3; Returns x if x >= 0, otherwise it returns -x
abs (vec4 x) = vec4; Returns x if x >= 0, otherwise it returns -x

sign (float x) = float; Returns 1.0 if x > 0, 0.0 if x = 0, or -1.0 if x < 0
sign (vec2 x) = vec2; Returns 1.0 if x > 0, 0.0 if x = 0, or -1.0 if x < 0
sign (vec3 x) = vec3; Returns 1.0 if x > 0, 0.0 if x = 0, or -1.0 if x < 0
sign (vec4 x) = vec4; Returns 1.0 if x > 0, 0.0 if x = 0, or -1.0 if x < 0

floor (float x) = float; Returns a value equal to the nearest integer that is less than or equal to x.
floor (vec2 x) = vec2; Returns a value equal to the nearest integer that is less than or equal to x.
floor (vec3 x) = vec3; Returns a value equal to the nearest integer that is less than or equal to x.
floor (vec4 x) = vec4; Returns a value equal to the nearest integer that is less than or equal to x.

ceil (float x) = float; Returns a value equal to the nearest integer that is greater than or equal to x.
ceil (vec2 x) = vec2; Returns a value equal to the nearest integer that is greater than or equal to x.
ceil (vec3 x) = vec3; Returns a value equal to the nearest integer that is greater than or equal to x.
ceil (vec4 x) = vec4; Returns a value equal to the nearest integer that is greater than or equal to x.

fract (float x) = float; Returns x - floor (x).
fract (vec2 x) = vec2; Returns x - floor (x).
fract (vec3 x) = vec3; Returns x - floor (x).
fract (vec4 x) = vec4; Returns x - floor (x).

mod (float x, float y) = float; Modulus. Returns x - y * floor (x/y)
mod (vec2 x, float y) = vec2; Modulus. Returns x - y * floor (x/y)
mod (vec3 x, float y) = vec3; Modulus. Returns x - y * floor (x/y)
mod (vec4 x, float y) = vec4; Modulus. Returns x - y * floor (x/y)

mod (vec2 x, vec2 y) = vec2; Modulus. Returns x - y * floor (x/y)
mod (vec3 x, vec3 y) = vec3; Modulus. Returns x - y * floor (x/y)
mod (vec4 x, vec4 y) = vec4; Modulus. Returns x - y * floor (x/y)

min (float x, float y) = float; Returns y if y < x, otherwise it returns x.
min (vec2 x, vec2 y) = vec2; Returns y if y < x, otherwise it returns x.
min (vec3 x, vec3 y) = vec3; Returns y if y < x, otherwise it returns x.
min (vec4 x, vec4 y) = vec4; Returns y if y < x, otherwise it returns x.

min (vec2 x, float y) = vec2; Returns y if y < x, otherwise it returns x.
min (vec3 x, float y) = vec3; Returns y if y < x, otherwise it returns x.
min (vec4 x, float y) = vec4; Returns y if y < x, otherwise it returns x.

max (float x, float y) = float; Returns y if x < y, otherwise it returns x.
max (vec2 x, vec2 y) = vec2; Returns y if x < y, otherwise it returns x.
max (vec3 x, vec3 y) = vec3; Returns y if x < y, otherwise it returns x.
max (vec4 x, vec4 y) = vec4; Returns y if x < y, otherwise it returns x.

max (vec2 x, float y) = vec2; Returns y if x < y, otherwise it returns x.
max (vec3 x, float y) = vec3; Returns y if x < y, otherwise it returns x.
max (vec4 x, float y) = vec4; Returns y if x < y, otherwise it returns x.

clamp (float x, float minVal, float maxVal) = float; Returns min (max (x, minVal), maxVal).
clamp (vec2 x, vec2 minVal, vec2 maxVal) = vec2; Returns min (max (x, minVal), maxVal).
clamp (vec3 x, vec3 minVal, vec3 maxVal) = vec3; Returns min (max (x, minVal), maxVal).
clamp (vec4 x, vec4 minVal, vec4 maxVal) = vec4; Returns min (max (x, minVal), maxVal).

clamp (vec2 x, float minVal, float maxVal) = vec2; Returns min (max (x, minVal), maxVal).
clamp (vec3 x, float minVal, float maxVal) = vec3; Returns min (max (x, minVal), maxVal).
clamp (vec4 x, float minVal, float maxVal) = vec4; Returns min (max (x, minVal), maxVal).

mix (float x, float y, float a) = float; Returns x * (1 - a) + y * a, i.e., the linear blend of x and y
mix (vec2 x, vec2 y, vec2 a) = vec2; Returns x * (1 - a) + y * a, i.e., the linear blend of x and y
mix (vec3 x, vec3 y, vec3 a) = vec3; Returns x * (1 - a) + y * a, i.e., the linear blend of x and y
mix (vec4 x, vec4 y, vec4 a) = vec4; Returns x * (1 - a) + y * a, i.e., the linear blend of x and y

mix (vec2 x, vec2 y,float a) = vec2; Returns x * (1 - a) + y * a, i.e., the linear blend of x and y
mix (vec3 x, vec3 y,float a) = vec3; Returns x * (1 - a) + y * a, i.e., the linear blend of x and y
mix (vec4 x, vec4 y,float a) = vec4; Returns x * (1 - a) + y * a, i.e., the linear blend of x and y

step (float edge, float x) = float; Returns 0.0 if x < edge, otherwise it returns 1.0.
step (vec2 edge, vec2 x) = vec2; Returns 0.0 if x < edge, otherwise it returns 1.0.
step (vec3 edge, vec3 x) = vec3; Returns 0.0 if x < edge, otherwise it returns 1.0.
step (vec4 edge, vec4 x) = vec4; Returns 0.0 if x < edge, otherwise it returns 1.0.

step (float edge, vec2 x) = vec2; Returns 0.0 if x < edge, otherwise it returns 1.0.
step (float edge, vec3 x) = vec3; Returns 0.0 if x < edge, otherwise it returns 1.0.
step (float edge, vec4 x) = vec4; Returns 0.0 if x < edge, otherwise it returns 1.0.

smoothstep (float edge0, float edge1, float x) = float; Returns 0.0 if x <= edge0 and 1.0 if x >= edge1 and performs smooth Hermite interpolation between 0 and 1 when edge0 < x < edge1.
smoothstep (vec2 edge0, vec2 edge1, vec2 x) = vec2; Returns 0.0 if x <= edge0 and 1.0 if x >= edge1 and performs smooth Hermite interpolation between 0 and 1 when edge0 < x < edge1.
smoothstep (vec3 edge0, vec3 edge1, vec3 x) = vec3; Returns 0.0 if x <= edge0 and 1.0 if x >= edge1 and performs smooth Hermite interpolation between 0 and 1 when edge0 < x < edge1.
smoothstep (vec4 edge0, vec4 edge1, vec4 x) = vec4; Returns 0.0 if x <= edge0 and 1.0 if x >= edge1 and performs smooth Hermite interpolation between 0 and 1 when edge0 < x < edge1.

smoothstep (float edge0, float edge1, vec2 x) = vec2; Returns 0.0 if x <= edge0 and 1.0 if x >= edge1 and performs smooth Hermite interpolation between 0 and 1 when edge0 < x < edge1.
smoothstep (float edge0, float edge1, vec3 x) = vec3; Returns 0.0 if x <= edge0 and 1.0 if x >= edge1 and performs smooth Hermite interpolation between 0 and 1 when edge0 < x < edge1.
smoothstep (float edge0, float edge1, vec4 x) = vec4; Returns 0.0 if x <= edge0 and 1.0 if x >= edge1 and performs smooth Hermite interpolation between 0 and 1 when edge0 < x < edge1.






length (float x) = float; Returns the length of vector x, i.e., sqrt (x[0] * x[0] + x[1] * x[1] + ...)
length (vec2 x) = float; Returns the length of vector x, i.e., sqrt (x[0] * x[0] + x[1] * x[1] + ...)
length (vec3 x) = float; Returns the length of vector x, i.e., sqrt (x[0] * x[0] + x[1] * x[1] + ...)
length (vec4 x) = float; Returns the length of vector x, i.e., sqrt (x[0] * x[0] + x[1] * x[1] + ...)

distance (float p0, float p1) = float; Returns the distance between p0 and p1, i.e. length (p0 - p1)
distance (vec2 p0, vec2 p1) = float; Returns the distance between p0 and p1, i.e. length (p0 - p1)
distance (vec3 p0, vec3 p1) = float; Returns the distance between p0 and p1, i.e. length (p0 - p1)
distance (vec4 p0, vec4 p1) = float; Returns the distance between p0 and p1, i.e. length (p0 - p1)

dot (float x, float y) = float; Returns the dot product of x and y, i.e., result = x[0] * y[0] + x[1] * y[1] + ...
dot (vec2 x, vec2 y) = float; Returns the dot product of x and y, i.e., result = x[0] * y[0] + x[1] * y[1] + ...
dot (vec3 x, vec3 y) = float; Returns the dot product of x and y, i.e., result = x[0] * y[0] + x[1] * y[1] + ...
dot (vec4 x, vec4 y) = float; Returns the dot product of x and y, i.e., result = x[0] * y[0] + x[1] * y[1] + ...

vec3 cross (vec3 x, vec3 y) Returns the cross product of x and y.

normalize (float x) = float; Returns a vector in the same direction as x but with a length of 1.
normalize (vec2 x) = vec2; Returns a vector in the same direction as x but with a length of 1.
normalize (vec3 x) = vec3; Returns a vector in the same direction as x but with a length of 1.
normalize (vec4 x) = vec4; Returns a vector in the same direction as x but with a length of 1.

ftransform() = vec4; For vertex shaders only. Perform fixed function transform (ie. gl_Position = ftransform();)

faceforward (float N, float I, float Nref) = float; If dot (Nref, I) < 0 return N otherwise return -N.
faceforward (vec2 N, vec2 I, vec2 Nref) = vec2; If dot (Nref, I) < 0 return N otherwise return -N.
faceforward (vec3 N, vec3 I, vec3 Nref) = vec3; If dot (Nref, I) < 0 return N otherwise return -N.
faceforward (vec4 N, vec4 I, vec4 Nref) = vec4; If dot (Nref, I) < 0 return N otherwise return -N.

reflect (float I, float N) = float; Reflection is calculated with (I)ncident against (N)ormal. (both should be normalized)
reflect (vec2 I, vec2 N) = vec2; Reflection is calculated with (I)ncident against (N)ormal. (both should be normalized)
reflect (vec3 I, vec3 N) = vec3; Reflection is calculated with (I)ncident against (N)ormal. (both should be normalized)
reflect (vec4 I, vec4 N) = vec4; Reflection is calculated with (I)ncident against (N)ormal. (both should be normalized)

refract(float I, float N, float eta) = float; Refraction is calculated with (I)ncident against (N)ormal. (both should be normalized)
refract(vec2 I, vec2 N, float eta) = vec2; Refraction is calculated with (I)ncident against (N)ormal. (both should be normalized)
refract(vec3 I, vec3 N, float eta) = vec3; Refraction is calculated with (I)ncident against (N)ormal. (both should be normalized)
refract(vec4 I, vec4 N, float eta) = vec4; Refraction is calculated with (I)ncident against (N)ormal. (both should be normalized)




matrixCompMult (mat2 x, mat2 y) = mat2; Multiply matrix x by matrix y component-wise.
matrixCompMult (mat3 x, mat3 y) = mat3; Multiply matrix x by matrix y component-wise.
matrixCompMult (mat4 x, mat4 y) = mat4; Multiply matrix x by matrix y component-wise.




lessThan(vec2 x, vec2 y) = bvec2; Returns the component-wise compare of x < y.
lessThan(vec3 x, vec3 y) = bvec3; Returns the component-wise compare of x < y.
lessThan(vec4 x, vec4 y) = bvec4; Returns the component-wise compare of x < y.
lessThan(ivec2 x, ivec2 y) = bvec2; Returns the component-wise compare of x < y. 
lessThan(ivec3 x, ivec3 y) = bvec3; Returns the component-wise compare of x < y. 
lessThan(ivec4 x, ivec4 y) = bvec4; Returns the component-wise compare of x < y. 


lessThanEqual(vec2 x, vec2 y) = bvec2; Returns the component-wise compare of x <= y.
lessThanEqual(vec3 x, vec3 y) = bvec3; Returns the component-wise compare of x <= y.
lessThanEqual(vec4 x, vec4 y) = bvec4; Returns the component-wise compare of x <= y.
lessThanEqual(ivec2 x, ivec2 y) = bvec2; Returns the component-wise compare of x <= y.
lessThanEqual(ivec3 x, ivec3 y) = bvec3; Returns the component-wise compare of x <= y.
lessThanEqual(ivec4 x, ivec4 y) = bvec4; Returns the component-wise compare of x <= y.


greaterThan(vec2 x, vec2 y) = bvec2; Returns the component-wise compare of x > y.
greaterThan(vec3 x, vec3 y) = bvec3; Returns the component-wise compare of x > y.
greaterThan(vec4 x, vec4 y) = bvec4; Returns the component-wise compare of x > y.
greaterThan(ivec2 x, ivec2 y) = bvec2; Returns the component-wise compare of x > y.
greaterThan(ivec3 x, ivec3 y) = bvec3; Returns the component-wise compare of x > y.
greaterThan(ivec4 x, ivec4 y) = bvec4; Returns the component-wise compare of x > y.

greaterThanEqual(vec2 x, vec2 y) = bvec2; Returns the component-wise compare of x >= y.
greaterThanEqual(vec3 x, vec3 y) = bvec3; Returns the component-wise compare of x >= y.
greaterThanEqual(vec4 x, vec4 y) = bvec4; Returns the component-wise compare of x >= y.
greaterThanEqual(ivec2 x, ivec2 y) = bvec; Returns the component-wise compare of x >= y.
greaterThanEqual(ivec3 x, ivec3 y) = bvec; Returns the component-wise compare of x >= y.
greaterThanEqual(ivec4 x, ivec4 y) = bvec; Returns the component-wise compare of x >= y.

equal(vec2 x, vec2 y) = bvec2; Returns the component-wise compare of x == y.
equal(vec3 x, vec3 y) = bvec3; Returns the component-wise compare of x == y.
equal(vec4 x, vec4 y) = bvec4; Returns the component-wise compare of x == y.

equal(ivec2 x, ivec2 y) = bvec2; Returns the component-wise compare of x == y.
equal(ivec3 x, ivec3 y) = bvec3; Returns the component-wise compare of x == y.
equal(ivec4 x, ivec4 y) = bvec4; Returns the component-wise compare of x == y.

equal(bvec2 x, bvec2 y) = bvec2; Returns the component-wise compare of x == y.
equal(bvec3 x, bvec3 y) = bvec3; Returns the component-wise compare of x == y.
equal(bvec4 x, bvec4 y) = bvec4; Returns the component-wise compare of x == y.

notEqual(vec2 x, vec2 y) = bvec2; Returns the component-wise compare of x != y.
notEqual(vec3 x, vec3 y) = bvec3; Returns the component-wise compare of x != y.
notEqual(vec4 x, vec4 y) = bvec4; Returns the component-wise compare of x != y.

notEqual(ivec2 x, ivec2 y) = bvec2; Returns the component-wise compare of x != y.
notEqual(ivec3 x, ivec3 y) = bvec3; Returns the component-wise compare of x != y.
notEqual(ivec4 x, ivec4 y) = bvec4; Returns the component-wise compare of x != y.

notEqual(bvec2 x, bvec2 y) = bvec2; Returns the component-wise compare of x != y.
notEqual(bvec3 x, bvec3 y) = bvec3; Returns the component-wise compare of x != y.
notEqual(bvec4 x, bvec4 y) = bvec4; Returns the component-wise compare of x != y.

any(bvec2 x) = bool; Returns true if any component of x is true.
any(bvec3 x) = bool; Returns true if any component of x is true.
any(bvec4 x) = bool; Returns true if any component of x is true.

all(bvec2 x) = bool; Returns true only if all components of x are true.
all(bvec3 x) = bool; Returns true only if all components of x are true.
all(bvec4 x) = bool; Returns true only if all components of x are true.

not(bvec2 x) = bvec2; Returns the component-wise logical complement of x.
not(bvec3 x) = bvec3; Returns the component-wise logical complement of x.
not(bvec4 x) = bvec4; Returns the component-wise logical complement of x.



texture1D (sampler1D sampler, float coord) = vec4; Do a texture lookup in a 1D texture using coord for coordinates.
texture1D (sampler1D sampler, float coord, float bias) = vec4; Do a texture lookup in a 1D texture using coord for coordinates.

texture1DProj (sampler1D sampler, vec2 coord) = vec4; Do a texture lookup in a 1D texture using coord for coordinates (divided by coord.y).
texture1DProj (sampler1D sampler, vec2 coord, float bias) = vec4; Do a texture lookup in a 1D texture using coord for coordinates. (divided by coord.y).

texture1DProj (sampler1D sampler, vec4 coord) = vec4; Do a texture lookup in a 1D texture using coord for coordinates (divide by coord.w).
texture1DProj (sampler1D sampler, vec4 coord, float bias) = vec4; Do a texture lookup in a 1D texture using coord for coordinates (divided by coord.w).

texture1DLod (sampler1D sampler, float coord, float lod) = vec4; Do a texture lookup in a 1D texture using coord for coordinates.
texture1DProjLod (sampler1D sampler, vec2 coord, float lod) = vec4; Do a texture lookup in a 1D texture using coord for coordinates (divided by coord.y).
texture1DProjLod (sampler1D sampler, vec4 coord, float lod) = vec4; Do a texture lookup in a 1D texture using coord for coordinates (divided by coord.w).


texture2D (sampler2D sampler, vec2 coord ) = vec4; Do a texture lookup in a 2D texture using coord for coordinates.
texture2D (sampler2D sampler, vec2 coord, float bias) = vec4; Do a texture lookup in a 2D texture using coord for coordinates.

texture2DProj (sampler2D sampler, vec3 coord) = vec4; Do a texture lookup in a 2D texture using coord for coordinates (divided by coord.z).
texture2DProj (sampler2D sampler, vec3 coord, float bias) = vec4; Do a texture lookup in a 2D texture using coord for coordinates (divided by coord.z).

texture2DProj (sampler2D sampler, vec4 coord) = vec4; Do a texture lookup in a 2D texture using coord for coordinates (divided by coord.w).
texture2DProj (sampler2D sampler, vec4 coord, float bias) = vec4; Do a texture lookup in a 2D texture using coord for coordinates (divided by coord.w).

texture2DLod (sampler2D sampler, vec2 coord, float lod) = vec4; Do a texture lookup in a 2D texture using coord for coordinates.
texture2DProjLod (sampler2D sampler, vec3 coord, float lod) = vec4; Do a texture lookup in a 2D texture using coord for coordinates (divided by coord.z).
texture2DProjLod (sampler2D sampler, vec4 coord, float lod) = vec4; Do a texture lookup in a 2D texture using coord for coordinates (divided by coord.w).


texture3D (sampler3D sampler, vec3 coord ) = vec4; Do a texture lookup in a 3D texture using coord for coordinates.
texture3D (sampler3D sampler, vec3 coord, float bias) = vec4; Do a texture lookup in a 3D texture using coord for coordinates.

texture3DProj (sampler3D sampler, vec4 coord) = vec4; Do a texture lookup in a 3D texture using coord for coordinates (divided by coord.w).
texture3DProj (sampler3D sampler, vec4 coord, float bias) = vec4; Do a texture lookup in a 3D texture using coord for coordinates (divided by coord.w).

texture3DLod (sampler3D sampler, vec3 coord, float lod) = vec4; Do a texture lookup in a 3D texture using coord for coordinates.
texture3DProjLod (sampler3D sampler, vec4 coord, float lod) = vec4; Do a texture lookup in a 3D texture using coord for coordinates (divided by coord.w).


textureCube (samplerCube sampler, vec3 coord) = vec4; Do a texture lookup in a cube map texture using coord for coordinates.
textureCube (samplerCube sampler, vec3 coord, float bias) = vec4; Do a texture lookup in a cube map texture using coord for coordinates.
textureCubeLod (samplerCube sampler, vec3 coord, float lod) = vec4; Do a texture lookup in a cube map texture using coord for coordinates.


shadow1D (sampler1DShadow sampler, vec3 coord) = vec4; Do a shadow texture lookup in a 1D texture using coord for coordinates.
shadow1D (sampler1DShadow sampler, vec3 coord, float bias) = vec4; Do a shadow texture lookup in a 1D texture using coord for coordinates.

shadow2D (sampler2DShadow sampler, vec3 coord) = vec4; Do a shadow texture lookup in a 2D texture using coord for coordinates.
shadow2D (sampler2DShadow sampler, vec3 coord, float bias) = vec4; Do a shadow texture lookup in a 2D texture using coord for coordinates.

shadow1DProj (sampler1DShadow sampler, vec4 coord) = vec4; Do a shadow texture lookup in a 1D texture using coord for coordinates (divided by coord.w).
shadow1DProj (sampler1DShadow sampler, vec4 coord, float bias) = vec4; Do a shadow texture lookup in a 1D texture using coord for coordinates (divided by coord.w).

shadow2DProj (sampler2DShadow sampler, vec4 coord) = vec4; Do a shadow texture lookup in a 2D texture using coord for coordinates (divided by coord.w).
shadow2DProj (sampler2DShadow sampler, vec4 coord, float bias) = vec4; Do a shadow texture lookup in a 2D texture using coord for coordinates (divided by coord.w).

shadow1DLod (sampler1DShadow sampler, vec3 coord, float lod) = vec4; Do a shadow texture lookup in a 1D texture using coord for coordinates.
shadow2DLod (sampler2DShadow sampler, vec3 coord, float lod) = vec4; Do a shadow texture lookup in a 2D texture using coord for coordinates.
shadow1DProjLod(sampler1DShadow sampler, vec4 coord, float lod) = vec4; Do a shadow texture lookup in a 1D texture using coord for coordinates (divided by coord.w).
shadow2DProjLod(sampler2DShadow sampler, vec4 coord, float lod) = vec4; Do a shadow texture lookup in a 2D texture using coord for coordinates (divided by coord.w).



dFdx (float p) = float; Returns the derivative in x using local differencing for the input argument p.
dFdx (vec2 p) = vec2; Returns the derivative in x using local differencing for the input argument p.
dFdx (vec3 p) = vec3; Returns the derivative in x using local differencing for the input argument p.
dFdx (vec4 p) = vec4; Returns the derivative in x using local differencing for the input argument p.

dFdy (float p) = float; Returns the derivative in y using local differencing for the input argument p.
dFdy (vec2 p) = vec2; Returns the derivative in y using local differencing for the input argument p.
dFdy (vec3 p) = vec3; Returns the derivative in y using local differencing for the input argument p.
dFdy (vec4 p) = vec4; Returns the derivative in y using local differencing for the input argument p.

fwidth (float p) = float; Returns the sum of the absolute derivative. i.e. abs (dFdx (p)) + abs (dFdy (p)).
fwidth (vec2 p) = vec2; Returns the sum of the absolute derivative. i.e. abs (dFdx (p)) + abs (dFdy (p)).
fwidth (vec3 p) = vec3; Returns the sum of the absolute derivative. i.e. abs (dFdx (p)) + abs (dFdy (p)).
fwidth (vec4 p) = vec4; Returns the sum of the absolute derivative. i.e. abs (dFdx (p)) + abs (dFdy (p)).



noise1(float x) = float; Returns a 1D noise value based on the input value x.
noise1 (vec2 x) = float; Returns a 1D noise value based on the input value x.
noise1 (vec3 x) = float; Returns a 1D noise value based on the input value x.
noise1 (vec4 x) = float; Returns a 1D noise value based on the input value x.

noise2 (float x) = vec2; Returns a 2D noise value based on the input value x.
noise2 (vec2 x) = vec2; Returns a 2D noise value based on the input value x.
noise2 (vec3 x) = vec2; Returns a 2D noise value based on the input value x.
noise2 (vec4 x) = vec2; Returns a 2D noise value based on the input value x.

noise3 (float x) = vec3; Returns a 3D noise value based on the input value x.
noise3 (vec2 x) = vec3; Returns a 3D noise value based on the input value x.
noise3 (vec3 x) = vec3; Returns a 3D noise value based on the input value x.
noise3 (vec4 x) = vec3; Returns a 3D noise value based on the input value x.

noise4 (float x) = vec4; Returns a 4D noise value based on the input value x.
noise4 (vec2 x) = vec4; Returns a 4D noise value based on the input value x.
noise4 (vec3 x) = vec4; Returns a 4D noise value based on the input value x.
noise4 (vec4 x) = vec4; Returns a 4D noise value based on the input value x.


